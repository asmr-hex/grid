// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCHEMA_HPP
#define SCHEMA_HPP

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class name;
class Interface;
class Midi;
class Osc;
class Voltage;
class Outputs;
class Parameter;
class Voice;
class Instrument;
class Instruments;
class Layout;
class ControlSurfaces;
class type;
class Control;
class type1;
class Control1;
class Grid;
class Midi1;
class Midi2;
class Dimensions;
class Layouts;
class type2;
class Message;
class note;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class name: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  name ();

  name (const char*);

  name (const ::std::string&);

  name (const ::xml_schema::string&);

  name (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const name& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual name*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~name ();
};

class Interface: public ::xml_schema::type
{
  public:
  // Outputs
  //
  typedef ::Outputs Outputs_type;
  typedef ::xsd::cxx::tree::optional< Outputs_type > Outputs_optional;
  typedef ::xsd::cxx::tree::traits< Outputs_type, char > Outputs_traits;

  const Outputs_optional&
  Outputs () const;

  Outputs_optional&
  Outputs ();

  void
  Outputs (const Outputs_type& x);

  void
  Outputs (const Outputs_optional& x);

  void
  Outputs (::std::unique_ptr< Outputs_type > p);

  // Instruments
  //
  typedef ::Instruments Instruments_type;
  typedef ::xsd::cxx::tree::optional< Instruments_type > Instruments_optional;
  typedef ::xsd::cxx::tree::traits< Instruments_type, char > Instruments_traits;

  const Instruments_optional&
  Instruments () const;

  Instruments_optional&
  Instruments ();

  void
  Instruments (const Instruments_type& x);

  void
  Instruments (const Instruments_optional& x);

  void
  Instruments (::std::unique_ptr< Instruments_type > p);

  // ControlSurfaces
  //
  typedef ::ControlSurfaces ControlSurfaces_type;
  typedef ::xsd::cxx::tree::optional< ControlSurfaces_type > ControlSurfaces_optional;
  typedef ::xsd::cxx::tree::traits< ControlSurfaces_type, char > ControlSurfaces_traits;

  const ControlSurfaces_optional&
  ControlSurfaces () const;

  ControlSurfaces_optional&
  ControlSurfaces ();

  void
  ControlSurfaces (const ControlSurfaces_type& x);

  void
  ControlSurfaces (const ControlSurfaces_optional& x);

  void
  ControlSurfaces (::std::unique_ptr< ControlSurfaces_type > p);

  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // Constructors.
  //
  Interface (const name_type&);

  Interface (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Interface (const Interface& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Interface*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Interface&
  operator= (const Interface& x);

  virtual 
  ~Interface ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Outputs_optional Outputs_;
  Instruments_optional Instruments_;
  ControlSurfaces_optional ControlSurfaces_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class Midi: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // device
  //
  typedef ::xml_schema::string device_type;
  typedef ::xsd::cxx::tree::traits< device_type, char > device_traits;

  const device_type&
  device () const;

  device_type&
  device ();

  void
  device (const device_type& x);

  void
  device (::std::unique_ptr< device_type > p);

  // Constructors.
  //
  Midi (const name_type&,
        const device_type&);

  Midi (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  Midi (const Midi& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual Midi*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Midi&
  operator= (const Midi& x);

  virtual 
  ~Midi ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< device_type > device_;
};

class Osc: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // host
  //
  typedef ::xml_schema::string host_type;
  typedef ::xsd::cxx::tree::traits< host_type, char > host_traits;

  const host_type&
  host () const;

  host_type&
  host ();

  void
  host (const host_type& x);

  void
  host (::std::unique_ptr< host_type > p);

  // port
  //
  typedef ::xml_schema::string port_type;
  typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

  const port_type&
  port () const;

  port_type&
  port ();

  void
  port (const port_type& x);

  void
  port (::std::unique_ptr< port_type > p);

  // Constructors.
  //
  Osc (const name_type&,
       const host_type&,
       const port_type&);

  Osc (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  Osc (const Osc& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual Osc*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Osc&
  operator= (const Osc& x);

  virtual 
  ~Osc ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< host_type > host_;
  ::xsd::cxx::tree::one< port_type > port_;
};

class Voltage: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // type
  //
  typedef ::type type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  static const type_type&
  type_default_value ();

  // port
  //
  typedef ::xml_schema::string port_type;
  typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

  const port_type&
  port () const;

  port_type&
  port ();

  void
  port (const port_type& x);

  void
  port (::std::unique_ptr< port_type > p);

  // Constructors.
  //
  Voltage (const name_type&,
           const port_type&);

  Voltage (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Voltage (const Voltage& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Voltage*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Voltage&
  operator= (const Voltage& x);

  virtual 
  ~Voltage ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< type_type > type_;
  static const type_type type_default_value_;
  ::xsd::cxx::tree::one< port_type > port_;
};

class Outputs: public ::xml_schema::type
{
  public:
  // Midi
  //
  typedef ::Midi Midi_type;
  typedef ::xsd::cxx::tree::sequence< Midi_type > Midi_sequence;
  typedef Midi_sequence::iterator Midi_iterator;
  typedef Midi_sequence::const_iterator Midi_const_iterator;
  typedef ::xsd::cxx::tree::traits< Midi_type, char > Midi_traits;

  const Midi_sequence&
  Midi () const;

  Midi_sequence&
  Midi ();

  void
  Midi (const Midi_sequence& s);

  // Voltage
  //
  typedef ::Voltage Voltage_type;
  typedef ::xsd::cxx::tree::sequence< Voltage_type > Voltage_sequence;
  typedef Voltage_sequence::iterator Voltage_iterator;
  typedef Voltage_sequence::const_iterator Voltage_const_iterator;
  typedef ::xsd::cxx::tree::traits< Voltage_type, char > Voltage_traits;

  const Voltage_sequence&
  Voltage () const;

  Voltage_sequence&
  Voltage ();

  void
  Voltage (const Voltage_sequence& s);

  // Osc
  //
  typedef ::Osc Osc_type;
  typedef ::xsd::cxx::tree::sequence< Osc_type > Osc_sequence;
  typedef Osc_sequence::iterator Osc_iterator;
  typedef Osc_sequence::const_iterator Osc_const_iterator;
  typedef ::xsd::cxx::tree::traits< Osc_type, char > Osc_traits;

  const Osc_sequence&
  Osc () const;

  Osc_sequence&
  Osc ();

  void
  Osc (const Osc_sequence& s);

  // Constructors.
  //
  Outputs ();

  Outputs (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Outputs (const Outputs& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Outputs*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Outputs&
  operator= (const Outputs& x);

  virtual 
  ~Outputs ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Midi_sequence Midi_;
  Voltage_sequence Voltage_;
  Osc_sequence Osc_;
};

class Parameter: public ::xml_schema::type
{
  public:
  // Control
  //
  typedef ::Control Control_type;
  typedef ::xsd::cxx::tree::traits< Control_type, char > Control_traits;

  const Control_type&
  Control () const;

  Control_type&
  Control ();

  void
  Control (const Control_type& x);

  void
  Control (::std::unique_ptr< Control_type > p);

  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // type
  //
  typedef ::type1 type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  static const type_type&
  type_default_value ();

  // Constructors.
  //
  Parameter (const Control_type&,
             const name_type&);

  Parameter (::std::unique_ptr< Control_type >,
             const name_type&);

  Parameter (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  Parameter (const Parameter& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual Parameter*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Parameter&
  operator= (const Parameter& x);

  virtual 
  ~Parameter ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Control_type > Control_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< type_type > type_;
  static const type_type type_default_value_;
};

class Voice: public ::xml_schema::type
{
  public:
  // Control
  //
  typedef ::Control1 Control_type;
  typedef ::xsd::cxx::tree::traits< Control_type, char > Control_traits;

  const Control_type&
  Control () const;

  Control_type&
  Control ();

  void
  Control (const Control_type& x);

  void
  Control (::std::unique_ptr< Control_type > p);

  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // Constructors.
  //
  Voice (const Control_type&,
         const name_type&);

  Voice (::std::unique_ptr< Control_type >,
         const name_type&);

  Voice (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Voice (const Voice& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Voice*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Voice&
  operator= (const Voice& x);

  virtual 
  ~Voice ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Control_type > Control_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class Instrument: public ::xml_schema::type
{
  public:
  // Parameter
  //
  typedef ::Parameter Parameter_type;
  typedef ::xsd::cxx::tree::sequence< Parameter_type > Parameter_sequence;
  typedef Parameter_sequence::iterator Parameter_iterator;
  typedef Parameter_sequence::const_iterator Parameter_const_iterator;
  typedef ::xsd::cxx::tree::traits< Parameter_type, char > Parameter_traits;

  const Parameter_sequence&
  Parameter () const;

  Parameter_sequence&
  Parameter ();

  void
  Parameter (const Parameter_sequence& s);

  // Voice
  //
  typedef ::Voice Voice_type;
  typedef ::xsd::cxx::tree::sequence< Voice_type > Voice_sequence;
  typedef Voice_sequence::iterator Voice_iterator;
  typedef Voice_sequence::const_iterator Voice_const_iterator;
  typedef ::xsd::cxx::tree::traits< Voice_type, char > Voice_traits;

  const Voice_sequence&
  Voice () const;

  Voice_sequence&
  Voice ();

  void
  Voice (const Voice_sequence& s);

  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // Constructors.
  //
  Instrument (const name_type&);

  Instrument (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  Instrument (const Instrument& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual Instrument*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Instrument&
  operator= (const Instrument& x);

  virtual 
  ~Instrument ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Parameter_sequence Parameter_;
  Voice_sequence Voice_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class Instruments: public ::xml_schema::type
{
  public:
  // Instrument
  //
  typedef ::Instrument Instrument_type;
  typedef ::xsd::cxx::tree::sequence< Instrument_type > Instrument_sequence;
  typedef Instrument_sequence::iterator Instrument_iterator;
  typedef Instrument_sequence::const_iterator Instrument_const_iterator;
  typedef ::xsd::cxx::tree::traits< Instrument_type, char > Instrument_traits;

  const Instrument_sequence&
  Instrument () const;

  Instrument_sequence&
  Instrument ();

  void
  Instrument (const Instrument_sequence& s);

  // Constructors.
  //
  Instruments ();

  Instruments (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  Instruments (const Instruments& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual Instruments*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Instruments&
  operator= (const Instruments& x);

  virtual 
  ~Instruments ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Instrument_sequence Instrument_;
};

class Layout: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // Constructors.
  //
  Layout (const name_type&);

  Layout (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Layout (const Layout& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Layout*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Layout&
  operator= (const Layout& x);

  virtual 
  ~Layout ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
};

class ControlSurfaces: public ::xml_schema::type
{
  public:
  // Midi
  //
  typedef ::xml_schema::type Midi_type;
  typedef ::xsd::cxx::tree::sequence< Midi_type > Midi_sequence;
  typedef Midi_sequence::iterator Midi_iterator;
  typedef Midi_sequence::const_iterator Midi_const_iterator;
  typedef ::xsd::cxx::tree::traits< Midi_type, char > Midi_traits;

  const Midi_sequence&
  Midi () const;

  Midi_sequence&
  Midi ();

  void
  Midi (const Midi_sequence& s);

  // Voltage
  //
  typedef ::xml_schema::type Voltage_type;
  typedef ::xsd::cxx::tree::sequence< Voltage_type > Voltage_sequence;
  typedef Voltage_sequence::iterator Voltage_iterator;
  typedef Voltage_sequence::const_iterator Voltage_const_iterator;
  typedef ::xsd::cxx::tree::traits< Voltage_type, char > Voltage_traits;

  const Voltage_sequence&
  Voltage () const;

  Voltage_sequence&
  Voltage ();

  void
  Voltage (const Voltage_sequence& s);

  // Grid
  //
  typedef ::Grid Grid_type;
  typedef ::xsd::cxx::tree::sequence< Grid_type > Grid_sequence;
  typedef Grid_sequence::iterator Grid_iterator;
  typedef Grid_sequence::const_iterator Grid_const_iterator;
  typedef ::xsd::cxx::tree::traits< Grid_type, char > Grid_traits;

  const Grid_sequence&
  Grid () const;

  Grid_sequence&
  Grid ();

  void
  Grid (const Grid_sequence& s);

  // Constructors.
  //
  ControlSurfaces ();

  ControlSurfaces (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  ControlSurfaces (const ControlSurfaces& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual ControlSurfaces*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ControlSurfaces&
  operator= (const ControlSurfaces& x);

  virtual 
  ~ControlSurfaces ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Midi_sequence Midi_;
  Voltage_sequence Voltage_;
  Grid_sequence Grid_;
};

class type: public ::xml_schema::string
{
  public:
  enum value
  {
    control,
    gate,
    trigger
  };

  type (value v);

  type (const char* v);

  type (const ::std::string& v);

  type (const ::xml_schema::string& v);

  type (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  type (const type& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual type*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  type&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_type_convert ();
  }

  protected:
  value
  _xsd_type_convert () const;

  public:
  static const char* const _xsd_type_literals_[3];
  static const value _xsd_type_indexes_[3];
};

class Control: public ::xml_schema::type
{
  public:
  // Midi
  //
  typedef ::Midi1 Midi_type;
  typedef ::xsd::cxx::tree::traits< Midi_type, char > Midi_traits;

  const Midi_type&
  Midi () const;

  Midi_type&
  Midi ();

  void
  Midi (const Midi_type& x);

  void
  Midi (::std::unique_ptr< Midi_type > p);

  // Voltage
  //
  typedef ::xml_schema::type Voltage_type;
  typedef ::xsd::cxx::tree::traits< Voltage_type, char > Voltage_traits;

  const Voltage_type&
  Voltage () const;

  Voltage_type&
  Voltage ();

  void
  Voltage (const Voltage_type& x);

  void
  Voltage (::std::unique_ptr< Voltage_type > p);

  // Osc
  //
  typedef ::xml_schema::type Osc_type;
  typedef ::xsd::cxx::tree::traits< Osc_type, char > Osc_traits;

  const Osc_type&
  Osc () const;

  Osc_type&
  Osc ();

  void
  Osc (const Osc_type& x);

  void
  Osc (::std::unique_ptr< Osc_type > p);

  // Constructors.
  //
  Control (const Midi_type&,
           const Voltage_type&,
           const Osc_type&);

  Control (::std::unique_ptr< Midi_type >,
           const Voltage_type&,
           const Osc_type&);

  Control (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Control (const Control& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Control*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Control&
  operator= (const Control& x);

  virtual 
  ~Control ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Midi_type > Midi_;
  ::xsd::cxx::tree::one< Voltage_type > Voltage_;
  ::xsd::cxx::tree::one< Osc_type > Osc_;
};

class type1: public ::xml_schema::string
{
  public:
  enum value
  {
    continuous,
    discrete
  };

  type1 (value v);

  type1 (const char* v);

  type1 (const ::std::string& v);

  type1 (const ::xml_schema::string& v);

  type1 (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  type1 (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  type1 (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  type1 (const type1& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual type1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  type1&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_type1_convert ();
  }

  protected:
  value
  _xsd_type1_convert () const;

  public:
  static const char* const _xsd_type1_literals_[2];
  static const value _xsd_type1_indexes_[2];
};

class Control1: public ::xml_schema::type
{
  public:
  // Midi
  //
  typedef ::Midi2 Midi_type;
  typedef ::xsd::cxx::tree::traits< Midi_type, char > Midi_traits;

  const Midi_type&
  Midi () const;

  Midi_type&
  Midi ();

  void
  Midi (const Midi_type& x);

  void
  Midi (::std::unique_ptr< Midi_type > p);

  // Voltage
  //
  typedef ::xml_schema::type Voltage_type;
  typedef ::xsd::cxx::tree::traits< Voltage_type, char > Voltage_traits;

  const Voltage_type&
  Voltage () const;

  Voltage_type&
  Voltage ();

  void
  Voltage (const Voltage_type& x);

  void
  Voltage (::std::unique_ptr< Voltage_type > p);

  // Constructors.
  //
  Control1 (const Midi_type&,
            const Voltage_type&);

  Control1 (::std::unique_ptr< Midi_type >,
            const Voltage_type&);

  Control1 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  Control1 (const Control1& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual Control1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Control1&
  operator= (const Control1& x);

  virtual 
  ~Control1 ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Midi_type > Midi_;
  ::xsd::cxx::tree::one< Voltage_type > Voltage_;
};

class Grid: public ::xml_schema::type
{
  public:
  // Dimensions
  //
  typedef ::Dimensions Dimensions_type;
  typedef ::xsd::cxx::tree::traits< Dimensions_type, char > Dimensions_traits;

  const Dimensions_type&
  Dimensions () const;

  Dimensions_type&
  Dimensions ();

  void
  Dimensions (const Dimensions_type& x);

  void
  Dimensions (::std::unique_ptr< Dimensions_type > p);

  // Layouts
  //
  typedef ::Layouts Layouts_type;
  typedef ::xsd::cxx::tree::traits< Layouts_type, char > Layouts_traits;

  const Layouts_type&
  Layouts () const;

  Layouts_type&
  Layouts ();

  void
  Layouts (const Layouts_type& x);

  void
  Layouts (::std::unique_ptr< Layouts_type > p);

  // name
  //
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // type
  //
  typedef ::type2 type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::unique_ptr< type_type > p);

  // device
  //
  typedef ::xml_schema::string device_type;
  typedef ::xsd::cxx::tree::traits< device_type, char > device_traits;

  const device_type&
  device () const;

  device_type&
  device ();

  void
  device (const device_type& x);

  void
  device (::std::unique_ptr< device_type > p);

  // Constructors.
  //
  Grid (const Dimensions_type&,
        const Layouts_type&,
        const name_type&,
        const type_type&,
        const device_type&);

  Grid (::std::unique_ptr< Dimensions_type >,
        ::std::unique_ptr< Layouts_type >,
        const name_type&,
        const type_type&,
        const device_type&);

  Grid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  Grid (const Grid& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual Grid*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Grid&
  operator= (const Grid& x);

  virtual 
  ~Grid ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Dimensions_type > Dimensions_;
  ::xsd::cxx::tree::one< Layouts_type > Layouts_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< device_type > device_;
};

class Midi1: public ::xml_schema::type
{
  public:
  // Message
  //
  typedef ::Message Message_type;
  typedef ::xsd::cxx::tree::sequence< Message_type > Message_sequence;
  typedef Message_sequence::iterator Message_iterator;
  typedef Message_sequence::const_iterator Message_const_iterator;
  typedef ::xsd::cxx::tree::traits< Message_type, char > Message_traits;

  const Message_sequence&
  Message () const;

  Message_sequence&
  Message ();

  void
  Message (const Message_sequence& s);

  // output
  //
  typedef ::xml_schema::string output_type;
  typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

  const output_type&
  output () const;

  output_type&
  output ();

  void
  output (const output_type& x);

  void
  output (::std::unique_ptr< output_type > p);

  // channel
  //
  typedef ::xml_schema::integer channel_type;
  typedef ::xsd::cxx::tree::traits< channel_type, char > channel_traits;

  const channel_type&
  channel () const;

  channel_type&
  channel ();

  void
  channel (const channel_type& x);

  // arg
  //
  typedef ::xml_schema::string arg_type;
  typedef ::xsd::cxx::tree::traits< arg_type, char > arg_traits;

  const arg_type&
  arg () const;

  arg_type&
  arg ();

  void
  arg (const arg_type& x);

  void
  arg (::std::unique_ptr< arg_type > p);

  // Constructors.
  //
  Midi1 (const output_type&,
         const channel_type&,
         const arg_type&);

  Midi1 (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Midi1 (const Midi1& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Midi1*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Midi1&
  operator= (const Midi1& x);

  virtual 
  ~Midi1 ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Message_sequence Message_;
  ::xsd::cxx::tree::one< output_type > output_;
  ::xsd::cxx::tree::one< channel_type > channel_;
  ::xsd::cxx::tree::one< arg_type > arg_;
};

class Midi2: public ::xml_schema::type
{
  public:
  // note
  //
  typedef ::note note_type;
  typedef ::xsd::cxx::tree::traits< note_type, char > note_traits;

  const note_type&
  note () const;

  note_type&
  note ();

  void
  note (const note_type& x);

  void
  note (::std::unique_ptr< note_type > p);

  // output
  //
  typedef ::xml_schema::string output_type;
  typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

  const output_type&
  output () const;

  output_type&
  output ();

  void
  output (const output_type& x);

  void
  output (::std::unique_ptr< output_type > p);

  // channel
  //
  typedef ::xml_schema::string channel_type;
  typedef ::xsd::cxx::tree::traits< channel_type, char > channel_traits;

  const channel_type&
  channel () const;

  channel_type&
  channel ();

  void
  channel (const channel_type& x);

  void
  channel (::std::unique_ptr< channel_type > p);

  // Constructors.
  //
  Midi2 (const note_type&,
         const output_type&,
         const channel_type&);

  Midi2 (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Midi2 (const Midi2& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Midi2*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Midi2&
  operator= (const Midi2& x);

  virtual 
  ~Midi2 ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< note_type > note_;
  ::xsd::cxx::tree::one< output_type > output_;
  ::xsd::cxx::tree::one< channel_type > channel_;
};

class Dimensions: public ::xml_schema::type
{
  public:
  // width
  //
  typedef ::xml_schema::integer width_type;
  typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

  const width_type&
  width () const;

  width_type&
  width ();

  void
  width (const width_type& x);

  // height
  //
  typedef ::xml_schema::integer height_type;
  typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

  const height_type&
  height () const;

  height_type&
  height ();

  void
  height (const height_type& x);

  // Constructors.
  //
  Dimensions (const width_type&,
              const height_type&);

  Dimensions (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  Dimensions (const Dimensions& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual Dimensions*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Dimensions&
  operator= (const Dimensions& x);

  virtual 
  ~Dimensions ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< width_type > width_;
  ::xsd::cxx::tree::one< height_type > height_;
};

class Layouts: public ::xml_schema::type
{
  public:
  // Layout
  //
  typedef ::Layout Layout_type;
  typedef ::xsd::cxx::tree::sequence< Layout_type > Layout_sequence;
  typedef Layout_sequence::iterator Layout_iterator;
  typedef Layout_sequence::const_iterator Layout_const_iterator;
  typedef ::xsd::cxx::tree::traits< Layout_type, char > Layout_traits;

  const Layout_sequence&
  Layout () const;

  Layout_sequence&
  Layout ();

  void
  Layout (const Layout_sequence& s);

  // Constructors.
  //
  Layouts ();

  Layouts (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Layouts (const Layouts& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Layouts*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Layouts&
  operator= (const Layouts& x);

  virtual 
  ~Layouts ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Layout_sequence Layout_;
};

class type2: public ::xml_schema::string
{
  public:
  enum value
  {
    monome
  };

  type2 (value v);

  type2 (const char* v);

  type2 (const ::std::string& v);

  type2 (const ::xml_schema::string& v);

  type2 (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  type2 (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  type2 (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  type2 (const type2& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual type2*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  type2&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_type2_convert ();
  }

  protected:
  value
  _xsd_type2_convert () const;

  public:
  static const char* const _xsd_type2_literals_[1];
  static const value _xsd_type2_indexes_[1];
};

class Message: public ::xml_schema::type
{
  public:
  // Byte
  //
  typedef ::xml_schema::string Byte_type;
  typedef ::xsd::cxx::tree::sequence< Byte_type > Byte_sequence;
  typedef Byte_sequence::iterator Byte_iterator;
  typedef Byte_sequence::const_iterator Byte_const_iterator;
  typedef ::xsd::cxx::tree::traits< Byte_type, char > Byte_traits;

  const Byte_sequence&
  Byte () const;

  Byte_sequence&
  Byte ();

  void
  Byte (const Byte_sequence& s);

  // Constructors.
  //
  Message ();

  Message (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Message (const Message& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Message*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Message&
  operator= (const Message& x);

  virtual 
  ~Message ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Byte_sequence Byte_;
};

class note: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  note ();

  note (const char*);

  note (const ::std::string&);

  note (const ::xml_schema::string&);

  note (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  note (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  note (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  note (const note& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual note*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~note ();
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::Interface >
Interface_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Interface >
Interface_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Interface >
Interface_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Interface >
Interface_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Interface >
Interface_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Midi >
Midi_ (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Midi >
Midi_ (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Midi >
Midi_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Midi >
Midi_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Midi >
Midi_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Osc >
Osc_ (const ::std::string& uri,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (const ::std::string& uri,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (const ::std::string& uri,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Osc >
Osc_ (::std::istream& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (::std::istream& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (::std::istream& is,
      const ::std::string& id,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Osc >
Osc_ (::xercesc::InputSource& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (::xercesc::InputSource& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (::xercesc::InputSource& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Osc >
Osc_ (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Osc >
Osc_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Voltage >
Voltage_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Voltage >
Voltage_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Voltage >
Voltage_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Voltage >
Voltage_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voltage >
Voltage_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Outputs >
Outputs_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Outputs >
Outputs_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Outputs >
Outputs_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Outputs >
Outputs_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Outputs >
Outputs_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Parameter >
Parameter_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Parameter >
Parameter_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Parameter >
Parameter_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Parameter >
Parameter_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Parameter >
Parameter_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Voice >
Voice_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Voice >
Voice_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Voice >
Voice_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Voice >
Voice_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Voice >
Voice_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Instrument >
Instrument_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Instrument >
Instrument_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Instrument >
Instrument_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Instrument >
Instrument_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instrument >
Instrument_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Instruments >
Instruments_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Instruments >
Instruments_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Instruments >
Instruments_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Instruments >
Instruments_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Instruments >
Instruments_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::Layout >
Layout_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::Layout >
Layout_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::Layout >
Layout_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::Layout >
Layout_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::Layout >
Layout_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::ControlSurfaces >
ControlSurfaces_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCHEMA_HPP
